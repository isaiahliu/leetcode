package p19xx

import util.expect

fun main() {
    class Solution {
        fun numberOfCombinations(num: String): Int {
            if (num[0] == '0') {
                return 0
            }

            val sameLengths = IntArray(num.length)

            var preChar = num[0]
            var size = 0
            num.forEachIndexed { index, ch ->
                if (ch == preChar) {
                    size++
                } else {
                    repeat(size) {
                        sameLengths[index - it - 1] = it + 1
                    }

                    size = 1
                    preChar = ch
                }
            }

            repeat(size) {
                sameLengths[num.length - it - 1] = it + 1
            }

            val commonLengths = Array(num.length) {
                IntArray(num.length)
            }

            fun getCommonLength(index1: Int, index2: Int): Int {
                if (index2 >= num.length) {
                    return 0
                }

                if (num[index1] != num[index2]) {
                    return 0
                }

                val sameLength = sameLengths[index1].coerceAtMost(sameLengths[index2])

                if (num[index1] == num[index2]) {
                    commonLengths[index1][index2] =
                        getCommonLength(index1 + sameLength, index2 + sameLength) + sameLength
                }

                return commonLengths[index1][index2]
            }

            val m = 1000000007
            val dp = Array(num.length) {
                LongArray(num.length + 1) { 1L }
            }

            for (index1 in dp.lastIndex downTo 0) {
                if (num[index1] == '0') {
                    continue
                }

                dp[index1][num.length] = 1L

                var sum = 1L

                for (index2 in index1 + (dp.size - index1) / 2 downTo index1 + 1) {
                    if (num[index2] == '0') {
                        dp[index1][index2] = sum
                    } else {
                        var index3 = index2 * 2 - index1

                        val commonLength = getCommonLength(index1, index2)

                        if (commonLength < index2 - index1 && num[index1 + commonLength] > num[index2 + commonLength]) {
                            index3++
                        }

                        dp[index2].getOrNull(index3)?.also {
                            sum += it
                            sum %= m
                        }
                        dp[index1][index2] = sum
                    }
                }
            }

            return dp[0][1].toInt()
        }
    }

    expect {
        Solution().numberOfCombinations(
            "11111"
        )
    }

    expect(101) {
        Solution().numberOfCombinations(
            "9999999999999"
        )
    }

    expect(2) {
        Solution().numberOfCombinations(
            "327"
        )
    }

    expect(755568658) {
        Solution().numberOfCombinations(

        )
    }
}